}
zeta<-matrix(0,ncol=K,nrow=n)
for (i in 1:n){
tau.matrix[i,]<-s.pdf[i,]/sum(s.pdf[i,])
MAX<-tau.matrix[i,1]
count<-1
for (t in 1:K){
if (tau.matrix[i,t]>= MAX){
MAX<-tau.matrix[i,t]
count<-t
}
}
zeta[i,count]<-1
}
p.matrix[r+1,]<-apply(tau.matrix,2,sum)/n
eps<-sum(abs(alpha.matrix[r+1,]-alpha.matrix[r,]))
r<-r+1
}
weight<-round(p.matrix[r,],digits=7)
weight[K]<-1-(sum(weight)-weight[K])
alpha<-alpha.matrix[r,]
beta<-beta.matrix[r,]
pdf0<-dmixture(lifespan,"gompertz",K,c(weight,alpha,beta))
cdf0<-pmixture(sort(lifespan),"gompertz",K,c(weight,alpha,beta))
}
if (model=="log-logistic"){
if(initial==FALSE){
for  (i in 1:K){
slice[i]<-sum(clust$cluster==i)/n
y<-sort(lifespan[clust$cluster==i])
nn<-length(y)
qp3<-sort(y)[floor(.75*nn)]
alpha[i]<-log(0.75/(1-0.75))/log(qp3/median(y))
beta[i]<-median(y)
}
alpha.matrix[1,]<-alpha
beta.matrix[1,]<-beta
p.matrix[1,]<-slice
for (i in 1:n){
for (j in 1:K){
if (clust$cluster[i]==j){zeta[i,j]<-1}
}
}
}
funclog<-function(x,par){a=par[1]; b=par[2]; (a*b^(-a)*(x)^(a-1))/(((x/b)^a +1)^2)}
if(initial==TRUE){
p.matrix[1,]<-starts[1:K]
alpha.matrix[1,]<-starts[(K+1):(2*K)]
beta.matrix[1,]<-starts[(2*K+1):(3*K)]
for (i in 1:K) zeta[,i]<-p.matrix[1,i]*funclog(lifespan,c(alpha.matrix[1,i],beta.matrix[1,i]))
d<-cbind(c(1:n),apply(zeta, 1, which.max))
zeta<-matrix(0,nrow=n,ncol=K)
zeta[d]<-1
}
r<-1
eps<-1
while ((eps>cri) && (r<N)){
for (j in 1:K){
hlog<-function(x,par){sum(-zeta[,j]*log(funclog(x,c(par[1],par[2]))))}
out<-suppressWarnings(nlminb(c(alpha.matrix[r,j],beta.matrix[r,j]),hlog,x=lifespan)$par)
alpha.matrix[r+1,j]<-out[1]
beta.matrix[r+1,j]<-out[2]
s.pdf[,j]<-p.matrix[r,j]*funclog(lifespan,c(alpha.matrix[r+1,j],beta.matrix[r+1,j]))
}
zeta<-matrix(0,ncol=K,nrow=n)
for (i in 1:n){
tau.matrix[i,]<-s.pdf[i,]/sum(s.pdf[i,])
MAX<-tau.matrix[i,1]
count<-1
for (t in 1:K){
if (tau.matrix[i,t]>= MAX){
MAX<-tau.matrix[i,t]
count<-t
}
}
zeta[i,count]<-1
}
p.matrix[r+1,]<-apply(tau.matrix,2,sum)/n
eps<-sum(abs(alpha.matrix[r+1,]-alpha.matrix[r,]))
r<-r+1
}
weight<-round(p.matrix[r,],digits=7)
weight[K]<-1-(sum(weight)-weight[K])
alpha<-alpha.matrix[r,]
beta<-beta.matrix[r,]
pdf0<-dmixture(lifespan,"log-logistic",K,c(weight,alpha,beta))
cdf0<-pmixture(sort(lifespan),"log-logistic",K,c(weight,alpha,beta))
}
if (model=="log-normal"){
if(initial==FALSE){
for  (i in 1:K){
slice[i]<-sum(clust$cluster==i)/n
y<-sort(lifespan[clust$cluster==i])
nn<-length(y)
median.lifespan<-median(y)
alpha[i]<-log(median.lifespan)
beta[i]<-sqrt(2*abs(log(mean(y)/median.lifespan)))
}
alpha.matrix[1,]<-alpha
beta.matrix[1,]<-beta
p.matrix[1,]<-slice
for (i in 1:n){
for (j in 1:K){
if (clust$cluster[i]==j){zeta[i,j]<-1}
}
}
}
if(initial==TRUE){
p.matrix[1,]<-starts[1:K]
alpha.matrix[1,]<-starts[(K+1):(2*K)]
beta.matrix[1,]<-starts[(2*K+1):(3*K)]
for (i in 1:K) zeta[,i]<-p.matrix[1,i]*dlnorm(lifespan,meanlog=alpha.matrix[1,i],sdlog=beta.matrix[1,i])
d<-cbind(c(1:n),apply(zeta, 1, which.max))
zeta<-matrix(0,nrow=n,ncol=K)
zeta[d]<-1
}
r<-1
eps<-1
while ((eps>cri) && (r<N)){
for (j in 1:K){
hlogn<-function(x,par){sum(-zeta[,j]*dlnorm(x,meanlog=par[1],sdlog=par[2],log=TRUE))}
out<-suppressWarnings(nlminb(c(alpha.matrix[r,j],beta.matrix[r,j]),hlogn,x=lifespan)$par)
alpha.matrix[r+1,j]<-out[1]
beta.matrix[r+1,j]<-out[2]
s.pdf[,j]<-p.matrix[r,j]*dlnorm(lifespan,meanlog=alpha.matrix[r+1,j],sdlog=beta.matrix[r+1,j])
}
zeta<-matrix(0,ncol=K,nrow=n)
for (i in 1:n){
tau.matrix[i,]<-s.pdf[i,]/sum(s.pdf[i,])
MAX<-tau.matrix[i,1]
count<-1
for (t in 1:K){
if (tau.matrix[i,t]>= MAX){
MAX<-tau.matrix[i,t]
count<-t
}
}
zeta[i,count]<-1
}
p.matrix[r+1,]<-apply(tau.matrix,2,sum)/n
eps<-sum(abs(alpha.matrix[r+1,]-alpha.matrix[r,]))
r<-r+1
}
weight<-round(p.matrix[r,],digits=7)
weight[K]<-1-(sum(weight)-weight[K])
alpha<-alpha.matrix[r,]
beta<-beta.matrix[r,]
pdf0<-dmixture(lifespan,"log-normal",K,c(weight,alpha,beta))
cdf0<-pmixture(sort(lifespan),"log-normal",K,c(weight,alpha,beta))
}
if (model=="weibull"){
if(initial==FALSE){
for  (i in 1:K){
slice[i]<-sum(clust$cluster==i)/n
y<-sort(lifespan[clust$cluster==i])
nn<-length(y)
k<-seq(1,nn)
X<-cbind(rep(1,nn),log(-log(1-k/(nn+1)))+(k*(nn-k+1))/((nn+1)^2*(nn+2))*(log(1-k/(nn+1))+1)/
((1-k/(nn+1))*log(1-k/(nn+1)))^2)
V<-matrix(0,nn,nn)
for(ii in 1:nn){
for(jj in ii:nn){
V[ii,jj]<-ii/(nn+1-ii)*(log((nn+1-ii)/(nn+1))*log((nn+1-jj)/(nn+1)))^(-1)
}
}
U<-solve(t(X)%*%solve(V)%*%X)%*%t(X)%*%solve(V)%*%log(y)
beta[i]<-exp(U[1])
alpha[i]<-1/U[2]
}
alpha.matrix[1,]<-alpha
beta.matrix[1,]<-beta
p.matrix[1,]<-slice
for (i in 1:n){
for (j in 1:K){
if (clust$cluster[i]==j){zeta[i,j]<-1}
}
}
}
if(initial==TRUE){
p.matrix[1,]<-starts[1:K]
alpha.matrix[1,]<-starts[(K+1):(2*K)]
beta.matrix[1,]<-starts[(2*K+1):(3*K)]
for (i in 1:K) zeta[,i]<-p.matrix[1,i]*dweibull(lifespan,shape=alpha.matrix[1,i],scale=beta.matrix[1,i])
d<-cbind(c(1:n),apply(zeta, 1, which.max))
zeta<-matrix(0,nrow=n,ncol=K)
zeta[d]<-1
}
r<-1
eps<-1
while ((eps>cri) && (r<N)){
for (j in 1:K){
hweib<-function(x,par){sum(-zeta[,j]*dweibull(x,shape=par[1],scale=par[2],log=TRUE))}
out<-suppressWarnings(nlminb(c(alpha.matrix[r,j],beta.matrix[r,j]),hweib,x=lifespan)$par)
alpha.matrix[r+1,j]<-out[1]
beta.matrix[r+1,j]<-out[2]
s.pdf[,j]<-p.matrix[r,j]*dweibull(lifespan,shape=alpha.matrix[r+1,j],scale=beta.matrix[r+1,j])
}
zeta<-matrix(0,ncol=K,nrow=n)
for (i in 1:n){
tau.matrix[i,]<-s.pdf[i,]/sum(s.pdf[i,])
MAX<-tau.matrix[i,1]
count<-1
for (t in 1:K){
if (tau.matrix[i,t]>= MAX){
MAX<-tau.matrix[i,t]
count<-t
}
}
zeta[i,count]<-1
}
p.matrix[r+1,]<-apply(tau.matrix,2,sum)/n
eps<-sum(abs(alpha.matrix[r+1,]-alpha.matrix[r,]))
r<-r+1
}
weight<-round(p.matrix[r,],digits=7)
weight[K]<-1-(sum(weight)-weight[K])
alpha<-alpha.matrix[r,]
beta<-beta.matrix[r,]
pdf0<-dmixture(lifespan,"weibull",K,c(weight,alpha,beta))
cdf0<-pmixture(sort(lifespan),"weibull",K,c(weight,alpha,beta))
}
for(i in 1:n)clustering[i]<-which(zeta[i,]==1)[1]
for(i in 1:n){
u[i]<-ifelse(cdf0[i]==1,0.99999999,cdf0[i])
}
n.p<-K*3-1
log.likelihood<-suppressWarnings(sum(log(pdf0)))
L<-seq(1,n)
ks.stat<-suppressWarnings(max(L/n-cdf0,cdf0-(L-1)/n))
AIC<--2*log.likelihood + 2*n.p
BIC<--2*log.likelihood + n.p*log(n)
out2<-cbind(AIC, BIC, ks.stat, log.likelihood)
colnames(out2)<-c("AIC","BIC","KS","log.likelihood")
if (model=="skew-normal"){
out1<-cbind(weight,alpha,beta,lambda)
colnames(out1)<-c("weight","alpha","beta","lambda")
}else{
out1<-cbind(weight,alpha,beta)
colnames(out1)<-c("weight","alpha","beta")
}
out3<-clustering
list("estimate"=out1,"measures"=out2,"cluster"=out3)
}
?rmixture
n<-50
K<-2
weight<-c(0.3,0.7)
alpha<-c(1,2)
beta<-c(2,1)
param<-c(weight,alpha,beta)
rmixture(n, "weibull", K, param)
detach("package:ForestFit", unload=TRUE)
n<-50
K<-2
weight<-c(0.3,0.7)
alpha<-c(1,2)
beta<-c(2,1)
param<-c(weight,alpha,beta)
rmixture(n, "weibull", K, param)
library(fitmix)
library(fitmix)
library(fitmix)
example("fitmixEM")
?fitmixEM
110000/740
all_bp <- read.delim("~/AMH Dropbox/Emine Guven/GEOdataSets/GSE78229&GSE62452normal/downregulated/all_bp.txt")
View(all_bp)
top10 <- read.csv("~/AMH Dropbox/Emine Guven/GEOdataSets/GSE78229&GSE62452normal/downregulated/top10.csv")
View(top10)
?barplot
barplot(top10$Category~top10$Term)
barplot(Category~Term,data=top10)
barplot(Term~Count,data=top10)
barplot(GNP ~ Year, data = longley)
longley
barplot(cbind(Employed, Unemployed) ~ Year, data = longley)
library(ggplot2)
ggplot(data=top10, aes(x=Category, y=Term)) +
geom_bar(stat="identity", width=0.5)
ggplot(data=top10, aes(x=Term, y=Category)) +
geom_bar(stat="identity", width=0.5)
barplot(top10$Count,xlab=top10$Term,las=2,cex.axis=0.6,col=c(rep("purple",10),rep("darkgreen",10),rep("blue",10),rep("magenta",10)))
barplot(top10$Count,xlab=top10$Term,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)))
barplot(top10$Count,xlab=top10$Term,las=2,cex.axis=0.2,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)))
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)))
text(seq(1.5, end_point, by = 2), par("usr")[3]-0.25,
srt = 60, adj = 1, xpd = TRUE,
labels = paste(top10$Term), cex = 0.65)
nrow(tor10)
nrow(top10)
par(mar = c(7, 4, 2, 2) + 0.2) #add room for the rotated labels
end_point = 0.5 + nrow(top10) + nrow(top10) - 1 #this is the line which does the trick (together with barplot "space = 1" parameter)
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)))
text(seq(1.5, end_point, by = 2), par("usr")[3]-0.25,
srt = 60, adj = 1, xpd = TRUE,
labels = paste(top10$Term), cex = 0.65)
top10$Term
par(mar = c(7, 4, 2, 2) + 0.2) #add room for the rotated labels
end_point = 0.5 + nrow(top10) + nrow(top10) - 1 #this is the line which does the trick (together with barplot "space = 1" parameter)
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)))
text(seq(0.5, end_point, by = 2), par("usr")[3]-0.25,
srt = 60, adj = 1, xpd = TRUE,
labels = paste(top10$Term), cex = 0.65)
par(mar = c(7, 4, 2, 2) + 0.2) #add room for the rotated labels
end_point = 0.5 + nrow(top10) + nrow(top10) - 1 #this is the line which does the trick (together with barplot "space = 1" parameter)
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)))
text(seq(2, end_point, by = 2), par("usr")[3]-0.25,
srt = 60, adj = 1, xpd = TRUE,
labels = paste(top10$Term), cex = 0.65)
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)),ylim=c(0,150))
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)),ylim=c(0,200))
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)),ylab=seq(0,180,by=10),ylim=c(0,180))
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)),ylab=c(seq(0,180,by=10)),ylim=c(0,180))
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)),ylab=c("seq(0,180,by=10)"),ylim=c(0,180))
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)),ylim=c(0,180))
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)),ylim=c(0,200))
axis(2, at=y,labels=round(y,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("magenta",10)),ylim=c(0,200))
setwd("~/AMH Dropbox/Emine Guven/GEOdataSets/GSE78229&GSE62452normal/MostRecent_analysis")
pdf("barplot_pathways")
par(mar = c(7, 4, 2, 2) + 0.2)
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("yellow",10)))
dev.off()
pdf("barplot_pathways")
par(mar = c(7, 4, 2, 2) + 0.2)
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("red",10)),ylim=c(0,200))
dev.off()
pdf("barplot_pathways.pdf")
par(mar = c(7, 4, 2, 2) + 0.2)
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("red",10)),ylim=c(0,200))
dev.off()
top10$Term
terms<-top10$Term
library(ggplot2)
terms<-top10$Term
term2=gsub("GO:[0-9]{7}~","",terms)
david_YO_GO_MF$Term<-term2
terms<-top10$Term
term2=gsub("GO:[0-9]{7}~","",terms)
top10$Term<-term2
ggsave("Goplots.pdf")#width=15,height = 10,units="cm")
options(repr.plot.width=5, repr.plot.height=3)
ggplot(top10[1:40,], aes(x = Term, y = Count, main="GO and KEGG terms")) +
geom_bar(stat = "identity") +
coord_flip() + scale_y_continuous(name="Gene Count") +
scale_x_discrete(name="") +
theme(axis.text.x = element_text(face="bold", color="black",
size=8, angle=0),
axis.text.y = element_text(face="bold", color="black",
size=8, angle=0))
dev.off()
barplot(top10$Count,las=2,cex.axis=0.6,
col=c(rep("purple",10),
rep("darkgreen",10),rep("blue",10),rep("red",10)),ylim=c(0,200),horiz=TRUE,
names.arg = top10$Term)
?barplot
gplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 15)+
scale_x_discrete(limits = top10$Category)+
theme_classic()
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 15)+
scale_x_discrete(limits = top10$Category)+
theme_classic()
ggplot(data=top10, aes(x=Category, y=Count, fill = Term)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 15)+
scale_x_discrete(limits = top10$Category)+
theme_classic()
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 15)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 15)+
scale_x_continuous(limits = top10$Term)+
theme_classic()
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 15)+
scale_x_discrete(limits = top10$Count)+
theme_classic()
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 15)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 15)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 200)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 180)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
top10 <- read.csv("~/AMH Dropbox/Emine Guven/GEOdataSets/GSE78229&GSE62452normal/downregulated/top10.csv")
View(top10)
ggsave("Goplots.pdf")#width=15,height = 10,units="cm")
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 180)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
dev.off()
ggsave("Goplots.pdf")#width=15,height = 10,units="cm")
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 180)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
dev.off()
terms<-top10$Term
term2=gsub("GO:[0-9]{7}~","",terms)
top10$Term<-term2
terms<-top10$Term
term2=gsub("GO:[0-9]{7}~","",terms)
top10$Term<-term2
ggsave("Goplots.pdf")#width=15,height = 10,units="cm")
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 180)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
dev.off()
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 180)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
top10 <- read.csv("~/AMH Dropbox/Emine Guven/GEOdataSets/GSE78229&GSE62452normal/downregulated/top10.csv")
View(top10)
ggplot(data=top10, aes(x=Term, y=Count, fill = Category)) +
geom_bar(stat="identity")+
scale_colour_gradient2()+
coord_flip()+
ylim(0, 180)+
scale_x_discrete(limits = top10$Term)+
theme_classic()
